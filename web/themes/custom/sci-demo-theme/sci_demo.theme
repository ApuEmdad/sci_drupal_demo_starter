<?php

// use Drupal\node\NodeInterface;
// use Symfony\Component\HttpFoundation\Request;
// use Symfony\Component\Routing\Route;

include_once __DIR__ . '/utils/image-utils.php';

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 */
function sci_demo_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Get the current path alias.
  $current_path = \Drupal::service('path_alias.manager')->getAliasByPath(\Drupal::service('path.current')->getPath());

  // dump($current_path);
  // Add a suggestion for '/about-us'.
  // if ($current_path === '/about-us') {
  //   $suggestions[] = 'page__about_us';
  // }
  if ($current_path === '/blogs') {
    $suggestions[] = 'page__blogs';
  }
  // if ($current_path === '/donations') {
  //   $suggestions[] = 'page__donation';
  // }
}


/**
 * Implements hook_theme_suggestions_pager_alter().
 */
function sci_demo_theme_suggestions_pager_alter(array &$suggestions, array $variables)
{
  $current_path = \Drupal::service('path_alias.manager')->getAliasByPath(\Drupal::service('path.current')->getPath());
  if ($current_path === '/blogs-page') {
    $suggestions[] = 'pager__blogs_page';
  }
}



/**
 * Implements hook_preprocess_breadcrumb() for breadcrumb templates.
 */
function sci_demo_preprocess_breadcrumb(&$variables)
{
  $request = \Drupal::request();
  $route_match = \Drupal::routeMatch();
  $route = $route_match->getRouteObject();
  $variables['page_title'] = \Drupal::service('title_resolver')->getTitle($request, $route);
}

/**
 * Implements hook_preprocess_node().
 */
function sci_demo_preprocess_node(array &$variables)
{
  $node = $variables['node'];
  $variables['node_url'] = $node->toUrl()->toString();
  // dump($node);

  if ($node->getType() === 'blogs') {
    $variables['node_url'] = $node->toUrl()->toString();
    $variables['blog_cover_image_url'] = generateImageUrl($node, 'field_blog_cover_image');

    if ($node->hasField('field_blog_description') && !$node->get('field_blog_description')->isEmpty()) {
      $description = $node->get('field_blog_description')->value;
      $variables['blog_description_snippet'] = mb_substr(strip_tags($description), 0, 100) . '...';
    } else {
      $variables['blog_description_snippet'] = '';
    }
  }


  if ($node->getType() === 'donation') {
    $variables['donation_cover_image_url'] = generateImageUrl($node, 'field_donation_cover_image');

    if ($node->hasField('field_donation_description') && !$node->get('field_donation_description')->isEmpty()) {
      $description = $node->get('field_donation_description')->value;
      $variables['donation_description_snippet'] = mb_substr(strip_tags($description), 0, 220) . '...';
    } else {
      $variables['donation_description_snippet'] = '';
    }
  }

  if ($node->getType() === 'event_content_type') {
    $variables['event_cover_image_url'] = generateImageUrl($node, 'field_event_cover_image');
    $variables['event_start_date'] = (new DateTime($node->get('field_event_start_date')->value))->format('Y-m-d H:i:s');
    $variables['event_end_date'] = (new DateTime($node->get('field_event_end_date')->value))->format('Y-m-d H:i:s');


    if ($node->hasField('field_event_description') && !$node->get('field_event_description')->isEmpty()) {
      $description = $node->get('field_event_description')->value;
      $variables['event_description_snippet'] = mb_substr(strip_tags($description), 0, 220) . '...';
    } else {
      $variables['event_description_snippet'] = '';
    }
  }
}
function sci_demo_theme_preprocess_node(array &$variables) {
  if ($variables['node']->getType() === 'donation') {
    // Render the custom block.
    $block_manager = \Drupal::service('plugin.manager.block');
    $config = [];
    $plugin_block = $block_manager->createInstance('donor_form_block', $config);
    $renderable_block = $plugin_block->build();

    // Pass the block content to Twig.
    $variables['donor_form_block'] = $renderable_block;
  }
}



function generateMediaImageUrl($node, $field_gallery_images) {
  if ($node->hasField($field_gallery_images) && !$node->get($field_gallery_images)->isEmpty()) {
    // Get the referenced media entities.
    $media_entities = $node->get($field_gallery_images)->referencedEntities();

    if (!empty($media_entities)) {
      $media_entity = $media_entities[0]; // Retrieve the first media entity.

      if ($media_entity->hasField('field_media_image_1') && !$media_entity->get('field_media_image_1')->isEmpty()) {
        // Get the file entity.
        $file = $media_entity->get('field_media_image_1')->entity;

        if ($file) {
          // Generate and return the absolute URL of the image file.
          return \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
        }
      }
    }
  }

  return NULL; // Return NULL if no valid image is found.
}



function sci_demo_preprocess_views_view(&$variables) {
  if ($variables['view']->id() === 'photo_galleries') {
    $variables['view_id'] = 'photo_galleries';

      // Iterate over the rows (each representing a node)
      foreach ($variables['view']->result as $key => $row) {
          $node = $row->_entity;
          // // Generate the image URL for the first image in the gallery_images field

          $image_url = generateMediaImageUrl($node, 'field_gallery_images','gallery_thumbnail' );
          $node_url = $node->toUrl('canonical', ['absolute' => TRUE])->toString();
          // Add custom field data to the row
          $variables['rows'][$key]['custom_field_data'] = [
              'title' => $node->label(),
              'description' => $node->get('field_event_description_of_the_i')->value ?? '',
              'image_url' => $image_url,
              'node_url' =>  $node_url,

          ];
      }
  }
}

